def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}


def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: 'com.android.library'

if (isNewArchitectureEnabled()) {
  apply plugin: 'com.facebook.react'
}

android {
  namespace "com.googleplacessdk"
  compileSdkVersion safeExtGet('compileSdkVersion', 36)

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', 24)
    targetSdkVersion safeExtGet('targetSdkVersion', 36)
    versionCode 1
    versionName "1.0"
    
    if (isNewArchitectureEnabled()) {
        buildConfigField("boolean", "IS_NEW_ARCHITECTURE_ENABLED", "true")
        // For New Architecture, we need to enable codegen
        buildConfigField "boolean", "REACT_NATIVE_UNSTABLE_USE_RUNTIME_SCHEDULER_ALWAYS", "true"
    } else {
        buildConfigField("boolean", "IS_NEW_ARCHITECTURE_ENABLED", "false")
    }
  }

  buildFeatures {
      buildConfig true
  }
  
  sourceSets {
    main {
      java {
        srcDir "src/main/java"
      }
      res {
        srcDirs = ["src/main/res"]
      }
    }
  }
}

dependencies {
  implementation('com.google.android.libraries.places:places:3.5.0') {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-common'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
  }
  
  if (isNewArchitectureEnabled()) {
      // New Architecture dependencies - Fixed to use the correct dependency paths
      implementation "com.facebook.react:react-android:${safeExtGet('reactNativeVersion', '+')}"
      
      // For TurboModules
      implementation "com.facebook.react:react-native:${safeExtGet('reactNativeVersion', '+')}"
  } else {
      // Old Architecture dependency
      implementation 'com.facebook.react:react-native:+'
  }
}
